#define _CRT_SECURE_NO_WARNINGS
#include"game.h"
//初始化数组
void intboard(char board[ROWS][COLS], int rows, int cols,char set)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < rows; i++)
	{
		for (j = 0; j < cols; j++)
		{
			board[i][j] = set;
		}
	}
}
//打印棋盘
void displayboard(char board[ROWS][COLS], int row, int col)
{
	int i = 0;
	int j = 0;
	int y = 1;
	int x = 1;
	printf(" ");
	for (int u = 1; u < 10; u++)
	{
		
		printf(" %d", y);
		y++;
		
	}
	printf("/列");
	printf("\n");
	for (i = 1; i < row+1; i++)
	{
		printf("%d ", x);
		for (j = 1; j < col+1; j++)
		{
			printf("%c ", board[i][j]);
		}
		if (i == row )
		{
			printf("\n/\n行");
		}
		x++;
		printf("\n\n");
	}
}
//布置雷
void setmine(char board[ROWS][COLS], int row, int col)
{
	int count = EASY_COUNT;
	while (count)
	{
		int x = rand() % row+1;
		int y = rand() % col+1;
		if (board[x][y] == '0')
		{
			board[x][y] = '1';//放雷
			count--;
		}
	}
}
int get_mine_count(char mine[ROWS][COLS], int x, int y)
{
	//'1'-'0'=1
	//'3'-'0'=3
	  return   mine[x - 1][y - 1] +
		       mine[x - 1][y] +
		       mine[x - 1][y + 1] +
		       mine[x][y - 1] +
		       mine[x][y + 1] +
		       mine[x + 1][y - 1] +
		       mine[x + 1][y] +
		       mine[x + 1][y + 1] - 8 * '0';
}
void uni(char mine[ROWS][COLS], char show[ROWS][COLS], int x, int y)
{
	
	int i = 0;
	int j = 0;
	int count = get_mine_count(mine, x, y);
	if (count == 0)
	{
		show[x][y] = ' ';
		for (i = -1; i <= 1; i++)
		{
			for (j = -1; j <= 1; j++)
			{
				if (x + i >= 1 && y + j >= 1 && x + i <= ROW&& y + j <= COL && show[x + i][y + j] == '*')
				{
					uni(mine, show, x + i, y + j);
				}
			}
		}
	}
	else
	{
		show[x][y] = count + '0';
	}
}
//递归展开一片
int iswin(char show[ROWS][COLS], char mine[ROWS][COLS] ,int row, int col)
{
	printf("\033c");
	int ret = 0;
	int i = 0;
	int j = 0;
	for (i = 1; i < row+1; i++)
	{
		for (j = 1; j < col+1; j++)
		{
			if (show[i][j] != '*')
			{
				ret++;
			}
		}
	}
	if (ret >= row * col - EASY_COUNT)
	{
		printf("恭喜排雷成功\n");
		displayboard(show, row, col);
		displayboard(mine, ROW, COL);
		return 1;
	}
	displayboard(mine, ROW, COL);//作弊专用
	displayboard(show, row, col);
	return 0;
}
//判断输赢
void findmine(char mine[ROWS][COLS], char show[ROWS][COLS], int row, int col)
{
	int x = 0;
	int y = 0;
	int win = 0;
	while (1)
	{
		printf("入力排雷位置\n");
		scanf("%d%d", &x, &y);
		if (x >= 1 && x <= row && y >= 1 && y <= col)
		{
			if (show[x][y] != '*')
			{
				printf("坐标重复\n");
			}
			if (mine[x][y] == '1')//踩雷
			{
				printf("\033c");
				printf("被炸死了\n");
				displayboard(mine, row, col);
				break;
			}
			//没踩雷
			else
			{
				uni(mine, show, x, y);
				int u=iswin(show,mine,ROW,COL);
				if (u == 1)
				{
					break;
				}
			}
		}
		else
		{
			printf("坐标非法\n");
		}
	}
}
//排查雷