#define _CRT_SECURE_NO_WARNINGS
#include"game.h"
void intboard(char board[ROW][COL], int row, int col)
{
	int i = 0; int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			board[i][j] = ' ';
		}
	}
}
void displayboard(char board[ROW][COL], int row, int col)
{
	int i = 0;
	for (i = 0; i < row; i++)
	{
		int j = 0;
		for (j = 0; j < col; j++)
		{
			if (j == col - 1)
			{
				printf(" %c ", board[i][j]);
				break;
			}
			printf(" %c |",board[i][j]);
		}
		printf("\n");
		if (i == row - 1)
		{
			break;
		}
		for (j = 0; j < col; j++)
		{
			if (j == col - 1)
			{
				printf("---");
				break;
			}
			printf("---|");
		}
		printf("\n");
	}
	printf("\n");
}
void playmove(char board[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	while (1)
	{


scanf("%d%d", &x, &y);

if (x <= 3 && x >= 0 && y <= 3 && y >= 0&&board[x-1][y-1]==' ')
		{
			board[x - 1][y - 1] = '*';
			break;
		}
		else
		{
			printf("超出预期，重新输入");
		}

	}
}
void pcmove(char board[ROW][COL], int row, int col)
{
	
	while (1)
	{
		int x = rand() % 3;
		int y = rand() % 3;
		if (board[x][y] == ' ')
		{
			board[x][y] = '#';
			break;
		}
		else
		{
			
		}
	}
}
int isfull(char board[ROW][COL], int row, int col)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			if (board[i][j] == ' ')
			{
				return 1;
			}
		}
	}
	return 0;
}
char iswin(char board[ROW][COL], int row, int col)
{
	for (int i = 0; i < row; i++)
	{
		if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != ' ')
		{
			return board[i][0];
		}
	}
	for (int i = 0; i < col; i++)
	{
		if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != ' ')
		{
			return board[0][i];
		}
	}
	if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[1][1] != ' ')
	{
		return board[0][0];
	}
			
	if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[2][0] != ' ')
	{
		return board[0][2];
	}
	if (isfull(board,ROW,COL) == 0)
	{
		return 'Q';
	}
	return 'C';
}